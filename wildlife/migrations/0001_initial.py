# Generated by Django 4.2.3 on 2023-11-09 04:37

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250, unique=True)),
                ("short_code", models.CharField(blank=True, max_length=50)),
                ("national", models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="PropertyType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250, unique=True)),
            ],
            options={
                "verbose_name": "Property type",
                "verbose_name_plural": "Property types",
                "db_table": "property_type",
            },
        ),
        migrations.CreateModel(
            name="Province",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Province",
                "verbose_name_plural": "Provinces",
                "db_table": "province",
            },
        ),
        migrations.CreateModel(
            name="TaxonRank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250, unique=True)),
            ],
            options={
                "verbose_name": "Taxon Rank",
                "verbose_name_plural": "Taxon Ranks",
            },
        ),
        migrations.CreateModel(
            name="Taxon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scientific_name", models.CharField(max_length=250, unique=True)),
                (
                    "common_name_varbatim",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildlife.taxon",
                    ),
                ),
                (
                    "taxon_rank",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildlife.taxonrank",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=300, unique=True)),
                ("short_code", models.CharField(blank=True, max_length=50)),
                (
                    "centroid",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="wildlife.organisation",
                    ),
                ),
                (
                    "property_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="wildlife.propertytype",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="wildlife.province",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="organisation",
            name="province",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="wildlife.province",
            ),
        ),
        migrations.CreateModel(
            name="AnnualPopulation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.PositiveIntegerField()),
                ("total", models.IntegerField()),
                ("adult_male", models.IntegerField(blank=True, null=True)),
                ("adult_female", models.IntegerField(blank=True, null=True)),
                ("juvenile_male", models.IntegerField(blank=True, null=True)),
                ("juvenile_female", models.IntegerField(blank=True, null=True)),
                ("note", models.TextField(blank=True, null=True)),
                ("area_available_to_species", models.FloatField(default=0.0)),
                ("sub_adult_total", models.IntegerField(blank=True, null=True)),
                ("sub_adult_male", models.IntegerField(blank=True, null=True)),
                ("sub_adult_female", models.IntegerField(blank=True, null=True)),
                ("juvenile_total", models.IntegerField(blank=True, null=True)),
                (
                    "property",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildlife.property",
                    ),
                ),
                (
                    "taxon",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildlife.taxon",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
